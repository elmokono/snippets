{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"CREA UN WRAPPER DE RTK QUERY API":{
		"prefix": "rtk-query",
		"body":[
			"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';",
			"export const ${1:template}Api = createApi({",
    		"   reducerPath: '${1:template}',",
    		"   //base url",
    		"   baseQuery: fetchBaseQuery({ baseUrl: '${2:template}' }),",
    		"   //endpoint",
    		"   endpoints: (builder) => ({",
        	"   //lee todos los ${1:template}",
        	"   leer${1:template}: builder.query({ query: () => '/${1:template}' }),",
        	"   //lee 1 ${1:template} por id",
        	"   leer${1:template}ById: builder.query({ query: (id) => `/${1:template}/${id}` }),",
    		"   })",
			"})",
			"//custom hooks, se generan en base a los nombres de los endpoints",
			"export const { useLeer${1:template}Query, useLeer${1:template}ByIdQuery } = ${1:template}Api",
		]
	},
	"REDUX/SLICE/THUNK": {
		"prefix": "redux-slice",
		"body": [
			"import { createSlice } from '@reduxjs/toolkit'",
			"",
			"const initialState = {",
			"  prop1: 0,",
			"  prop2: 'blablabla',",
			"}",
			"",
			"export const ${1:template}Slice = createSlice({",
			"  name: '${1:template}',",
			"  initialState,",
			"  reducers: {",
			"    ${2:template}: (state, action) => {",
			"      state.prop1 += action.payload",
			"    },",
			"  },",
			"})",
			"",
			"// Action creators are generated for each case reducer function",
			"export const { ${2:template} } = ${1:template}Slice.actions",
			"",
			"export default ${1:template}Slice.reducer",
			"",
			"//ejemplo de uso:",
			"//const valor1 = useSelector(state => state.${1:template}.prop1);",
			"//const dispatch = useDispatch();",
			"",
			"//..en el componente..",
			"//<button onClick={() => dispatch(${1:template}(xxxx))}>Ejecutar accion con argumento</button>",
			"//...",
			"",
			"store.js example",
			"//import {configureStore} from '@reduxjs/toolkit'",
			"//import authSlice from './auth/${1:template}Slice';",	
			"//export const store = configureStore({",
			"//   reducer: {",
			"//      authReducer: ${1:template}Slice,",
			"//   },",
			"//});",
			"",
			"thunks.js example",
			"//import { ${2:template} } from './mySliceFile'",
			"//",
			"//export const thunk${2:template} = (prop1 = '', prop2 = '') => {",
			"//   return async (dispatch) => {",
			"//      dispatch(${2:template}());",
			"//      console.log({prop1, prop2});",
			"//   }",
			"//}",
			"//",
			"//export const thunkAnotherMethod = () => {",
			"//   return async (dispatch) => {",
			"//   dispatch(anotherMethod());",
			"//   }",
			"//}",
		],
		"description": "CREA UN REDUX/SLICE/THUNK"
	}
}
